package knex;

typedef Where<TRecord, TResult> = ts.AnyOf19<(raw:Raw<Dynamic>) -> QueryBuilder<TRecord, TResult>, (callback:QueryCallback<Dynamic, Array<Any>>) -> QueryBuilder<TRecord, TResult>, (object:SafePartial<TRecord>) -> QueryBuilder<TRecord, TResult>, (object:Dynamic) -> QueryBuilder<TRecord, TResult>, (columnName:Any, value:Null<Dynamic>) -> QueryBuilder<TRecord, TResult>, (columnName:String, value:Null<Value>) -> QueryBuilder<TRecord, TResult>, (columnName:Any, operator_:ComparisionOperator, value:Null<Dynamic>) -> QueryBuilder<TRecord, TResult>, (columnName:String, operator_:String, value:Null<Value>) -> QueryBuilder<TRecord, TResult>, (columnName:Any, operator_:ComparisionOperator, value:QueryBuilder<Any, Any>) -> QueryBuilder<TRecord, TResult>, (columnName:String, operator_:String, value:QueryBuilder<Any, Any>) -> QueryBuilder<TRecord, TResult>, (left:Raw<Dynamic>, operator_:String, right:Null<Value>) -> QueryBuilder<TRecord, TResult>, (left:Raw<Dynamic>, operator_:String, right:QueryBuilder<Any, Any>) -> QueryBuilder<TRecord, TResult>, (condition:Bool) -> QueryBuilder<TRecord, TResult>, (sql:String, bindings:haxe.extern.Rest<RawBinding>) -> QueryBuilder<TRecord, Any>, (sql:String, bindings:ts.AnyOf2<Array<RawBinding>, ValueDict>) -> QueryBuilder<TRecord, Any>, (raw:Raw<Any>) -> QueryBuilder<TRecord, Any>, (callback:QueryCallback<Dynamic, Array<Any>>) -> QueryBuilder<TRecord, TResult>, (columnName:Dynamic) -> QueryBuilder<TRecord, TResult>, (columnName:String) -> QueryBuilder<TRecord, TResult>>;